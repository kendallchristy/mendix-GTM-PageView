'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "/*\nPlace your custom CSS here\n*/\n.widget-hello-world {\n\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvb2dsZVRhZ01hbmFnZXIuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztDQUVDO0FBQ0Q7O0FBRUEiLCJmaWxlIjoiR29vZ2xlVGFnTWFuYWdlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuUGxhY2UgeW91ciBjdXN0b20gQ1NTIGhlcmVcbiovXG4ud2lkZ2V0LWhlbGxvLXdvcmxkIHtcblxufVxuIl19 */";
var stylesheet="/*\nPlace your custom CSS here\n*/\n.widget-hello-world {\n\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdvb2dsZVRhZ01hbmFnZXIuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztDQUVDO0FBQ0Q7O0FBRUEiLCJmaWxlIjoiR29vZ2xlVGFnTWFuYWdlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuUGxhY2UgeW91ciBjdXN0b20gQ1NTIGhlcmVcbiovXG4ud2lkZ2V0LWhlbGxvLXdvcmxkIHtcblxufVxuIl19 */";
styleInject(css_248z);

var GoogleTagManager$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': css_248z,
	stylesheet: stylesheet
});

var require$$0 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(GoogleTagManager$1);

var warn$1 = {};

Object.defineProperty(warn$1, "__esModule", {
  value: true
});

var warn = function warn(s) {
  console.warn('[react-gtm]', s);
};

warn$1.default = warn;

var _warn = warn$1;

var _warn2 = _interopRequireDefault$2(_warn);

function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // https://developers.google.com/tag-manager/quickstart


var Snippets = {
  tags: function tags(_ref) {
    var id = _ref.id,
        events = _ref.events,
        dataLayer = _ref.dataLayer,
        dataLayerName = _ref.dataLayerName,
        preview = _ref.preview,
        auth = _ref.auth;
    var gtm_auth = '&gtm_auth=' + auth;
    var gtm_preview = '&gtm_preview=' + preview;
    if (!id) (0, _warn2.default)('GTM Id is required');
    var iframe = '\n      <iframe src="https://www.googletagmanager.com/ns.html?id=' + id + gtm_auth + gtm_preview + '&gtm_cookies_win=x"\n        height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe>';
    var script = '\n      (function(w,d,s,l,i){w[l]=w[l]||[];\n        w[l].push({\'gtm.start\': new Date().getTime(),event:\'gtm.js\', ' + JSON.stringify(events).slice(1, -1) + '});\n        var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!=\'dataLayer\'?\'&l=\'+l:\'\';\n        j.async=true;j.src=\'https://www.googletagmanager.com/gtm.js?id=\'+i+dl+\'' + gtm_auth + gtm_preview + '&gtm_cookies_win=x\';\n        f.parentNode.insertBefore(j,f);\n      })(window,document,\'script\',\'' + dataLayerName + '\',\'' + id + '\');';
    var dataLayerVar = this.dataLayer(dataLayer, dataLayerName);
    return {
      iframe: iframe,
      script: script,
      dataLayerVar: dataLayerVar
    };
  },
  dataLayer: function dataLayer(_dataLayer, dataLayerName) {
    return '\n      window.' + dataLayerName + ' = window.' + dataLayerName + ' || [];\n      window.' + dataLayerName + '.push(' + JSON.stringify(_dataLayer) + ')';
  }
};
var Snippets_1 = Snippets;

var _Snippets = Snippets_1;

var _Snippets2 = _interopRequireDefault$1(_Snippets);

function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var TagManager = {
  dataScript: function dataScript(dataLayer) {
    var script = document.createElement('script');
    script.innerHTML = dataLayer;
    return script;
  },
  gtm: function gtm(args) {
    var snippets = _Snippets2.default.tags(args);

    var noScript = function noScript() {
      var noscript = document.createElement('noscript');
      noscript.innerHTML = snippets.iframe;
      return noscript;
    };

    var script = function script() {
      var script = document.createElement('script');
      script.innerHTML = snippets.script;
      return script;
    };

    var dataScript = this.dataScript(snippets.dataLayerVar);
    return {
      noScript: noScript,
      script: script,
      dataScript: dataScript
    };
  },
  initialize: function initialize(_ref) {
    var gtmId = _ref.gtmId,
        _ref$events = _ref.events,
        events = _ref$events === undefined ? {} : _ref$events,
        dataLayer = _ref.dataLayer,
        _ref$dataLayerName = _ref.dataLayerName,
        dataLayerName = _ref$dataLayerName === undefined ? 'dataLayer' : _ref$dataLayerName,
        _ref$auth = _ref.auth,
        auth = _ref$auth === undefined ? '' : _ref$auth,
        _ref$preview = _ref.preview,
        preview = _ref$preview === undefined ? '' : _ref$preview;
    var gtm = this.gtm({
      id: gtmId,
      events: events,
      dataLayer: dataLayer || undefined,
      dataLayerName: dataLayerName,
      auth: auth,
      preview: preview
    });
    if (dataLayer) document.head.appendChild(gtm.dataScript);
    document.head.insertBefore(gtm.script(), document.head.childNodes[0]);
    document.body.insertBefore(gtm.noScript(), document.body.childNodes[0]);
  },
  dataLayer: function dataLayer(_ref2) {
    var _dataLayer = _ref2.dataLayer,
        _ref2$dataLayerName = _ref2.dataLayerName,
        dataLayerName = _ref2$dataLayerName === undefined ? 'dataLayer' : _ref2$dataLayerName;
    if (window[dataLayerName]) return window[dataLayerName].push(_dataLayer);

    var snippets = _Snippets2.default.dataLayer(_dataLayer, dataLayerName);

    var dataScript = this.dataScript(snippets);
    document.head.insertBefore(dataScript, document.head.childNodes[0]);
  }
};
var TagManager_1 = TagManager;

var _TagManager = TagManager_1;

var _TagManager2 = _interopRequireDefault(_TagManager);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var dist = _TagManager2.default;

const InitializeGTM = props => {
  react.useEffect(() => {
    if (!mx.ga4Connected) {
      // we need the flag because onNavigation is called several times for things like after widget load, after show page, etc. If we remove the flag, then we send more than one page hit per page viewing
      const origOnNavigation = mx.ui.getContentForm().onNavigation; // cache what the original function did

      mx.ui.getContentForm().onNavigation = () => {
        // Complete custom actions
        debugger;

        if (props.sendCustomProps === false) {
          // onNavigation, flag goes in mx.<something>
          const tagManagerArgsInitialize = {
            gtmId: props.measurementID
          };
          dist.initialize(tagManagerArgsInitialize);
        } else {
          //
          let dataLayerStructure = function (props) {
            var dataLayer = '{"event":"' + props.pageViewEventName + '",';

            if (props.sendPageTitle) {
              dataLayer += '"Page Name":"' + mx.ui.getContentForm().title + '",';
            }

            if (props.sendModuleLocation) {
              var modulePath = mx.ui.getContentForm().path;

              var moduleLocation = function (modulePath) {
                var pageExtension = ".page.xml";
                var path = modulePath.substr(0, modulePath.length - pageExtension.length);
                return path;
              }(modulePath);

              dataLayer += '"Module Location":"' + moduleLocation + '",';
            }

            if (props.sendPageURL) {
              if (mx.ui.getContentForm().url !== null) {
                var pageURL = window.location.origin + mx.ui.getContentForm().url;
              } else {
                var pageURL = window.location.origin;
              }

              var trimmedURL = function (fullURL) {
                var lastCharIndex = fullURL.lastIndexOf("/");
                var endString = fullURL.substring(lastCharIndex + 1, fullURL.length);

                if (isNaN(endString)) {
                  return fullURL; // the end of the string isn't a number, return the whole thing
                } else {
                  return fullPath.substr(0, lastCharIndex); // the end of the string is a number, trim it
                }
              }(pageURL);

              dataLayer += '"Page URL":"' + trimmedURL + '",';
            }

            if (props.sendSessionID) {
              dataLayer += '"Session ID":"' + mx.session.getSessionObjectId() + '",';
            }

            if (props.sendAdditionalProps) {
              for (const [propName, propValue] of Object.entries(props.additionalProps)) {
                dataLayer += '"' + propValue.propName + '":"' + propValue.propValue.value + '",';
              }
            }

            dataLayer = dataLayer.replace(/,\s*$/, ""); // remove the last comma

            dataLayer += "}";
            return JSON.parse(dataLayer);
          };

          let dataLayer = dataLayerStructure(props);
          const tagManagerArgs = {
            gtmId: props.measurementID,
            dataLayer
          };
          dist.initialize(tagManagerArgs);
        } //mx.previousLayout = mx.ui.getContentForm()._currentLayouts[0]; // set the previous layout after the page has loaded for the next comparison


        mx.ga4Connected = true; // Complete original actions

        origOnNavigation();
        return () => {
        };
      };
    }
  }, []);
  return null;
};

function GoogleTagManager({
  measurementID,
  sendCustomProps,
  pageViewEventName,
  sendPageTitle,
  sendModuleLocation,
  sendPageURL,
  sendSessionID,
  sendAdditionalProps,
  additionalProps
}) {
  return react.createElement(InitializeGTM, {
    measurementID: measurementID,
    sendCustomProps: sendCustomProps,
    pageViewEventName: pageViewEventName,
    sendPageTitle: sendPageTitle,
    sendModuleLocation: sendModuleLocation,
    sendPageURL: sendPageURL,
    sendSessionID: sendSessionID,
    sendAdditionalProps: sendAdditionalProps,
    additionalProps: additionalProps
  });
}
function getPreviewCss() {
  return require$$0;
}

exports.GoogleTagManager = GoogleTagManager;
exports.getPreviewCss = getPreviewCss;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
